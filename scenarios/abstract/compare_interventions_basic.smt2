(set-option :produce-unsat-cores true)
(declare-const n_days Int)
(declare-const quar_period Int)
(declare-const pop_size Int)
(declare-const pop_infected Int)
(declare-const location String)
(declare-const average_age Real)
(declare-const simp_prob Real)
(declare-const asimp_prob Real)
(declare-const simp_quar_prob Real)
(declare-const asimp_quar_prob Real)
(declare-const trace_probs Real)
(declare-const cum_tests Int)
(declare-const cum_quarantined Int)
(declare-const cum_infections Int)
(declare-const cum_deaths Int)

(assert (! (>= quar_period 14) :named constraint_0))
(assert (! (<= n_days 365) :named constraint_1))
(assert (! (<= 1000 pop_size) :named constraint_2))
(assert (! (<= asimp_quar_prob 1) :named constraint_3))
(assert (! (<= 0 simp_quar_prob) :named constraint_4))
(assert (! (<= asimp_prob 1) :named constraint_5))
(assert (! (<= 0 asimp_quar_prob) :named constraint_6))
(assert (! (<= 0 simp_prob) :named constraint_7))
(assert (! (or
  (= location "Albania") (or
  (= location "Afghanistan") false)) :named constraint_8))
(assert (! (< quar_period n_days) :named constraint_9))
(assert (! (<= 60 n_days) :named constraint_10))
(assert (! (<= simp_quar_prob 1) :named constraint_11))
(assert (! (<= pop_size 100000) :named constraint_12))
(assert (! (<= pop_infected pop_size) :named constraint_13))
(assert (! (< quar_period 14) :named constraint_14))
(assert (! (<= 0 pop_infected) :named constraint_15))
(assert (! (<= 0 quar_period) :named constraint_16))
(assert (! (<= 0 asimp_prob) :named constraint_17))
(assert (! (<= simp_prob 1) :named constraint_18))
(assert (! (<= trace_probs 1) :named constraint_19))
(assert (! (<= 0 trace_probs) :named constraint_20))
(check-sat)
(get-unsat-core)
