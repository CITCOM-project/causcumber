(declare-fun trace_probs () Real)
(declare-fun trace_probs_prime () Real)
(declare-fun asymp_prob () Real)
(declare-fun asymp_prob_prime () Real)
(declare-fun n_days () Int)
(declare-fun n_days_prime () Int)
(declare-fun symp_prob () Real)
(declare-fun symp_prob_prime () Real)
(declare-fun symp_quar_prob () Real)
(declare-fun symp_quar_prob_prime () Real)
(declare-fun asymp_quar_prob () Real)
(declare-fun asymp_quar_prob_prime () Real)
(declare-fun quar_period () Int)
(declare-fun quar_period_prime () Int)
(declare-fun pop_size () Int)
(declare-fun pop_infected () Int)
(declare-fun pop_size_prime () Int)
(declare-fun pop_infected_prime () Int)
(declare-fun location () String)
(declare-fun average_age () Int)
(declare-fun location_prime () String)
(declare-fun average_age_prime () Int)
(assert (>= trace_probs 0.0))
(assert (>= trace_probs_prime 0.0))
(assert (<= asymp_prob 1.0))
(assert (<= asymp_prob_prime 1.0))
(assert (<= n_days 365))
(assert (<= n_days_prime 365))
(assert (or false (= symp_prob (/ 1.0 2.0)) (= symp_prob 1.0)))
(assert (or false (= symp_prob_prime (/ 1.0 2.0)) (= symp_prob_prime 1.0)))
(assert (<= symp_quar_prob 1.0))
(assert (<= symp_quar_prob_prime 1.0))
(assert (or false (= asymp_quar_prob (/ 1.0 2.0)) (= asymp_quar_prob 1.0)))
(assert (or false (= asymp_quar_prob_prime (/ 1.0 2.0)) (= asymp_quar_prob_prime 1.0)))
(assert (<= asymp_quar_prob 1.0))
(assert (<= asymp_quar_prob_prime 1.0))
(assert (or false (= asymp_prob (/ 1.0 100.0)) (= asymp_prob (/ 1.0 20.0))))
(assert (or false (= asymp_prob_prime (/ 1.0 100.0)) (= asymp_prob_prime (/ 1.0 20.0))))
(assert (>= n_days 60))
(assert (>= n_days_prime 60))
(assert (>= symp_prob 0.0))
(assert (>= symp_prob_prime 0.0))
(assert (>= quar_period 0))
(assert (>= quar_period_prime 0))
(assert (<= pop_infected pop_size))
(assert (<= pop_infected_prime pop_size_prime))
(assert (= average_age (ite (= location "Rwanda") 24 (ite (= location "Japan") 46 0))))
(assert (= average_age_prime
   (ite (= location_prime "Rwanda") 24 (ite (= location_prime "Japan") 46 0))))
(assert (>= pop_infected 100))
(assert (>= pop_infected_prime 100))
(assert (>= asymp_prob 0.0))
(assert (>= asymp_prob_prime 0.0))
(assert (or false (= trace_probs (/ 1.0 2.0)) (= trace_probs 1.0)))
(assert (or false (= trace_probs_prime (/ 1.0 2.0)) (= trace_probs_prime 1.0)))
(assert (>= symp_quar_prob 0.0))
(assert (>= symp_quar_prob_prime 0.0))
(assert (or false (= location "Japan") (= location "Rwanda")))
(assert (or false (= location_prime "Japan") (= location_prime "Rwanda")))
(assert (>= asymp_quar_prob 0.0))
(assert (>= asymp_quar_prob_prime 0.0))
(assert (<= trace_probs 1.0))
(assert (<= trace_probs_prime 1.0))
(assert (or false (= quar_period 5) (= quar_period 14) (= quar_period 20)))
(assert (or false
    (= quar_period_prime 5)
    (= quar_period_prime 14)
    (= quar_period_prime 20)))
(assert (>= pop_size 10000))
(assert (>= pop_size_prime 10000))
(assert (or false (= symp_quar_prob (/ 1.0 2.0)) (= symp_quar_prob 1.0)))
(assert (or false (= symp_quar_prob_prime (/ 1.0 2.0)) (= symp_quar_prob_prime 1.0)))
(assert (<= pop_size 100000))
(assert (<= pop_size_prime 100000))
(assert (< quar_period n_days))
(assert (< quar_period_prime n_days_prime))
(assert (<= symp_prob 1.0))
(assert (<= symp_prob_prime 1.0))
(assert-soft (= n_days n_days_prime) :weight 2)
(assert-soft (= quar_period quar_period_prime) :weight 2)
(assert-soft (= pop_size pop_size_prime) :weight 2)
(assert-soft (= pop_infected pop_infected_prime) :weight 2)
(assert-soft (= location location_prime) :weight 2)
(assert-soft (= symp_prob symp_prob_prime) :weight 2)
(assert-soft (= asymp_prob asymp_prob_prime) :weight 2)
(assert-soft (= symp_quar_prob symp_quar_prob_prime) :weight 2)
(assert-soft (= asymp_quar_prob asymp_quar_prob_prime) :weight 2)
(assert-soft (= trace_probs trace_probs_prime) :weight 2)
(assert-soft (= average_age average_age_prime) :weight 2)
(check-sat)

